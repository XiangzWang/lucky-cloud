<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	为这个mapper指定一个唯一的namespace,namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的. 
	例如namespace="org.bamboo.mybatis.PSysUserMapper"就是org.bamboo.mybatis(包名)+PSysUserMapper(PSysUserMapper.xml文件去除后缀) 
-->
	
<mapper namespace="org.bamboo.mybatis.PSysUserMapper">
	<!-- 开启二级缓存 -->
	<!-- 
		1. 映射语句文件中的所有select语句将会被缓存。
	
	　　2. 映射语句文件中的所有insert，update和delete语句会刷新缓存。
	
	　　3. 缓存会使用Least Recently Used（LRU，最近最少使用的）算法来收回。
	
	　　4. 缓存会根据指定的时间间隔来刷新。
	
	　　5. 缓存会存储1024个对象
	 -->
	<!-- <cache/> -->
	
	<!--回收策略为先进先出-->
	<!--自动刷新时间60s-->
	<!--最多缓存512个引用对象-->
	<!--只读-->
	<cache eviction="FIFO" flushInterval="60000" size="512" readOnly="true"/>

	<!-- 
		在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复;
		使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型,
		resultType="org.bamboo.mybatis.PSysUser"就表示将查询结果封装成一个PSysUser类的对象,
		返回 PSysUser类就是users表所对应的实体类 
	-->
	
	<!-- 根据id查询得到一个user对象 -->
	<select id="getUser" parameterType="string" resultType="PSysUser">
		select staff_no staffNo, name name, org_no orgNo from p_sys_user where staff_no = #{staffNo}
	</select>
	
	<!-- 创建用户(Create) -->
    <insert id="addUser" parameterType="org.bamboo.mybatis.PSysUser">
        insert into p_sys_user(staff_no, name, pwd, org_no, create_date) 
        values(#{staffNo}, #{name}, #{pwd}, #{orgNo}, #{createDate})
    </insert>
    
    <!-- 删除用户(Remove) -->
    <delete id="deleteUser" parameterType="string">
        delete from p_sys_user where staff_no = #{staffNo}
    </delete>
    
    <!-- 修改用户(Update) -->
    <update id="updateUser" parameterType="org.bamboo.mybatis.PSysUser">
        update p_sys_user set name = #{name}, org_no = #{orgNo} where staff_no = #{staffNo}
    </update>
    
    <!-- 查询全部用户-->
    <select id="getAllUsers" resultType="org.bamboo.mybatis.PSysUser">
        select staff_no staffNo, name name, org_no orgNo from p_sys_user
    </select>
    
     <!-- 通过<resultMap>映射实体类属性名和表的字段名一一对应关系 -->
    <select id="selectResultMap" parameterType="string" resultMap="pSysUserResultMap">
        select staff_no staffNo, name name, org_no orgNo from p_sys_user where staff_no = #{staffNo}
    </select>
    <!--通过<resultMap>映射实体类属性名和表的字段名对应关系 -->
    <resultMap type="PSysUser" id="pSysUserResultMap">
        <!-- 用id属性来映射主键字段 -->
        <id property="staffNo" column="staff_no"/>
        <!-- 用result属性来映射非主键字段 -->
        <result property="name" column="name"/>
        <result property="orgNo" column="orgNo"/>
    </resultMap>
    
    <!-- 
        根据班级id查询班级信息(带老师的信息)
        ##1. 联表查询
        SELECT * FROM class c,teacher t WHERE c.teacher_id=t.t_id AND c.c_id=1;
        
        ##2. 执行两次查询
        SELECT * FROM class WHERE c_id=1;  //teacher_id=1
        SELECT * FROM teacher WHERE t_id=1;//使用上面得到的teacher_id
     -->

    <!-- 
    	方式一：嵌套结果：使用嵌套结果映射来处理重复的联合结果的子集
                封装联表查询的数据(去除重复的数据)
        select u.staff_no, u.name, u.org_no, o.org_name, o.org_type 
          from p_sys_user u, o_org o 
         where u.org_no = o.org_no
           and u.staff_no = #{staffNo}
    -->
    <select id="getUserWithOrg" parameterType="string" resultMap="pSysUserResultMap2">
        select u.staff_no, u.name, u.org_no, o.org_name, o.org_type 
          from p_sys_user u, o_org o 
         where u.org_no = o.org_no
           and u.staff_no = #{staffNo}
    </select>
    <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
    <resultMap type="PSysUser" id="pSysUserResultMap2">
        <id property="staffNo" column="staff_no"/>
        <result property="name" column="name"/>
        <association property="org" javaType="OOrg">
            <id property="orgNo" column="org_no"/>
            <result property="orgName" column="org_name"/>
        </association>
    </resultMap>
    
    <!-- 
    	方式二：嵌套查询：通过执行另外一个SQL映射语句来返回预期的复杂类型
        select u.staff_no, u.name, u.org_no
          from p_sys_user u
         where u.staff_no = #{staffNo};
        select o.org_no, o.org_name, o.org_type 
          from o_org o 
         where o.org_no = #{orgNo};
    -->
     <select id="getUserWithOrg2" parameterType="string" resultMap="pSysUserResultMap3">
        select u.staff_no, u.name, u.org_no
          from p_sys_user u
         where u.staff_no = #{staffNo}
     </select>
     <!-- 使用resultMap映射实体类和字段之间的一一对应关系 -->
     <resultMap type="PSysUser" id="pSysUserResultMap3">
        <id property="staffNo" column="staff_no"/>
        <result property="name" column="name"/>
        <association property="org" column="org_no" select="org.bamboo.mybatis.OrgMapper.getOrg"/>
     </resultMap>
     
     <!-- <select id="getOrg" parameterType="string" resultType="OOrg">
        select o.org_no orgNo, o.org_name orgName, o.org_type orgType
          from o_org o 
         where o.org_no = #{orgNo}
     </select> -->
    
</mapper>